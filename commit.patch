diff --git a/Makefile b/Makefile
index cac799d..94e7f9f 100644
--- a/Makefile
+++ b/Makefile
@@ -154,6 +154,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_find\
 
 
 ifeq ($(LAB),syscall)
diff --git a/kernel/main.c b/kernel/main.c
index 8a3dc2e..6c8cb86 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -11,6 +11,7 @@ void main() {
   if (cpuid() == 0) {
     // consoleinit();
     // printfinit();
+    printf("[210110612] enter main, init kernel\n");
     printf("\n");
     printf("xv6 kernel is booting\n");
     printf("\n");
diff --git a/kernel/proc.c b/kernel/proc.c
index 1607145..47434e6 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -183,6 +183,7 @@ uchar initcode[] = {0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02, 0x97, 0x05,
 
 // Set up first user process.
 void userinit(void) {
+  printf("[210110612] enter userinit\n");
   struct proc *p;
 
   p = allocproc();
@@ -197,6 +198,7 @@ void userinit(void) {
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
 
+  printf("[210110612] copy initcode to first user process\n");
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
diff --git a/kernel/start.c b/kernel/start.c
index f704fee..2c68560 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -52,6 +52,7 @@ void start() {
     // init uart and printf
     consoleinit();
     printfinit();
+    printf("[210110612] in start, init driver, interrupts and change mode\n");
   }
 
   // switch to supervisor mode and jump to main().
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..1a00ff7
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,80 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+//该函数用于输出最后一个文件名
+char* fmtname(char *path)
+{
+  char *p;
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+  return p;
+}
+
+void find(char *path, char *file_name)
+{
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, 0)) < 0){
+    fprintf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+  case T_FILE:
+  //当st的type就是文件时：
+    //当文件名就是需要寻找的时候，直接输出
+    if(strcmp(fmtname(path), file_name) == 0) printf("%s\n", path);
+    break;
+
+  case T_DIR:
+  //当st的type是文件夹时：
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf("ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+    *p++ = '/';
+    //读取文件夹下的每一个文件
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+        continue;
+      memmove(p, de.name, DIRSIZ);
+      p[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+        printf("ls: cannot stat %s\n", buf);
+        continue;
+      }
+      //递归find，但不递归进入.和..
+      if(strcmp(fmtname(buf), ".") != 0 && strcmp(fmtname(buf), "..") != 0) {
+        find(buf, file_name);
+      }
+    }
+    break;
+  }
+  close(fd);
+}
+
+int main(int argc, char *argv[])
+{
+  //当参数低于三个时，直接退出
+  if(argc < 3){
+    exit(0);
+  }
+  //输入进方法find
+  find(argv[1], argv[2]);
+  exit(0);
+}
diff --git a/user/init.c b/user/init.c
index 9ca8790..700830c 100644
--- a/user/init.c
+++ b/user/init.c
@@ -23,6 +23,7 @@ int main(void) {
 
   for (;;) {
     printf("init: starting sh\n");
+    printf("[210110612] start sh through execve\n");
     pid = fork();
     if (pid < 0) {
       printf("init: fork failed\n");
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..4684731
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,40 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc,char* argv[]){
+    int p1[2];
+    int p2[2];
+    char buff1[4] = "ping";
+    char buff2[4] = "pong";
+    pipe(p1);
+    pipe(p2);
+    int pid = fork();
+
+    if(pid > 0) {
+        //父线程
+        //往第一个管道里写ping
+        close(p1[0]);
+        write(p1[1], buff1, sizeof buff1);
+        close(p1[1]);
+        //等待子进程结束
+        wait((int *) 0);
+        close(p1[1]);
+        //从第二个管道中读pong
+        read(p2[0], buff2, sizeof buff2);
+        printf("%d: received %s\n", getpid(), buff2);
+        close(p2[0]);
+    } else if(pid == 0) {
+        //子线程
+        //从第一个管道里读ping
+        close(p1[1]);
+        read(p1[0], buff1, sizeof buff1);
+        close(p1[0]);
+        printf("%d: received %s\n", getpid(), buff1);
+        //往第二个管道里写pong
+        close(p2[0]);
+        write(p2[1], buff2, sizeof buff2);
+        close(p2[1]);
+        exit(0);
+    }
+    exit(0); //确保进程退出
+}
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..c01578a
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,13 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc,char* argv[]){
+    if(argc != 2){
+        printf("Sleep needs one argument!\n"); //检查参数数量是否正确
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]); //将字符串参数转为整数
+    sleep(ticks);              //使用系统调用sleep
+    printf("(nothing happens for a little while)\n");
+    exit(0); //确保进程退出
+}
\ No newline at end of file
